@page "/producto"
@page "/producto/{Id:int}"

@inject IProductoServicio productoServicio
@inject ICategoriaServicio categoriaServicio
@inject IToastService toastService
@inject SweetAlertService Swal
@inject NavigationManager _navServicio
@attribute [Authorize(Roles = "Administrador")];


<div class="row justify-content-center mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>
<div class="row justify-content-center mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

       <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
           <DataAnnotationsValidator></DataAnnotationsValidator>
           <div class="input-group">
               <span class="input-group-text bg-light" id="basic-addon3">Nombre</span>
                <input type="text" class="form-control"@bind-value=modelo.Nombre>
           </div>
           <ValidationMessage For="@(()=>modelo.Nombre)"/>

           <div class="input-group mt-3">
                <span class="input-group-text bg-light">Descripcion</span>
                <textarea class="form-control" @bind="modelo.Descripcion"></textarea>
           </div>

           <ValidationMessage For="@(()=>modelo.Descripcion)"/>
            
            <div class="input-group mt-3">
                <label class="input-group-text bg-light for="inputGroupSelect01">Categoria</label>
                <select class="form-select" value="@modelo.IdCategoria" @onchange="CambiarCategoria">
                    @foreach(var item in listaCategoria)
                    {
                        <option value="@item.IdCategoria">@item.Nombre</option>
                    }
                </select>
            </div>

            <div class="input-group mt-3">
                <span class="input-group-text  bg-light" id="basic-addon3"> Precio </span>
                <input type="number" class="form-control" @bind-value="modelo.Precio">
            </div>
            <ValidationMessage For="@(()=>modelo.Precio)"/>

            <div class="input-group mt-3">
                <span class="input-group-text  bg-light" id="basic-addon3">Precio Oferta</span>
                <input type="number" class="form-control" @bind-value="modelo.PrecioOferta"/>
            </div>
            <ValidationMessage For="@(()=>modelo.PrecioOferta)"/>

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Cantidad</span>
                <input type="number" class="form-control" @bind-value="modelo.Cantidad"/>
            </div>
            <ValidationMessage For="@(()=>modelo.Cantidad)"/>

           <div class="input-group mt-3">
               <span class="input-group-text bg-light">Imagen</span>
                <InputFile type="file" class="form-control" accept="image/png, image/gif, image/jpeg" OnChange="OnfileChange"></InputFile>
           </div>

           <div class="mt-3">
               <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
               <a href="/productos" class="btn btn-secondary" style="width:130px">Volver</a>
           </div>
            



       </EditForm>

    </div>
</div>



@code {
    [Parameter]
    public int Id{ get; set; }
    public string Titulo = "Nuevo producto";
    public string boton = "Crear";
    private List<CategoriaDTO> listaCategoria = new List<CategoriaDTO>();
    private ProductoDTO modelo = new ProductoDTO();

    protected override async Task OnInitializedAsync()
    {
        var response = await categoriaServicio.Lista("");
        if (response.EsCorrecto)
        {
            listaCategoria = (List<CategoriaDTO>)response.Resultado!;
            if (listaCategoria.Any() && Id==0)
            {
                modelo.IdCategoria = listaCategoria.First().IdCategoria;
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Titulo = "Actualizar Producto";
            boton = "Actualizar";

            var response = await productoServicio.Obtener(Id);
            if (response.EsCorrecto)
            {
                modelo = (ProductoDTO)response.Resultado!;
            }
            else
            {
                toastService.ShowWarning(response.Mensaje!);
            }
        }
    }

    void CambiarCategoria(ChangeEventArgs e)
    {
        modelo.IdCategoria = Convert.ToInt32(e.Value!.ToString());
    }

    async Task OnfileChange(InputFileChangeEventArgs e)
    {
        // Crear un objeto FileInfo para obtener información del archivo cargado
        FileInfo fileInfo = new FileInfo(e.File.Name);

        // Comprobar si la extensión del archivo es .jpg o .png (insensible a mayúsculas/minúsculas)
        if (fileInfo.Extension.ToLower().Contains(".jpg") || fileInfo.Extension.ToLower().Contains(".png"))
        {
            // Crear el formato MIME adecuado para la imagen (image/jpeg o image/png)
            var format = $"image/{fileInfo.Extension.Replace(".", "")}";

            // Solicitar una versión redimensionada de la imagen con un tamaño máximo de 450x300
            var resizeImage = await e.File.RequestImageFileAsync(format, 450, 300);

            // Crear un búfer de bytes del tamaño de la imagen redimensionada
            var buffer = new byte[resizeImage.Size];

            // Leer los datos de la imagen redimensionada en el búfer
            await resizeImage.OpenReadStream().ReadAsync(buffer);

            // Convertir los datos de la imagen en una cadena Base64 para su uso en un atributo src
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            // Asignar los datos de la imagen al modelo
            modelo.Imagen = imageData;
        }
    }


    private async Task GuardarCambios()
    {
        bool respuesta = true;
        string mensaje = string.Empty;


        if (Id != 0)
        {
            var response = await productoServicio.Editar(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Producto modificada";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo modificar";
            }
        }
        else
        {
            var response = await productoServicio.Crear(modelo);
            if (response.EsCorrecto)
            {
                mensaje = "Producto creada";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo crear";
            }
        }
        if (respuesta)
        {
            toastService.ShowSuccess(mensaje);
            _navServicio.NavigateTo("/productos");
        }
        else
        {
            toastService.ShowWarning(mensaje);
        }
    }

}
